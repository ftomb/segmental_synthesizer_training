plugins {
    id 'base'
    id 'org.m2ci.msp.praat-wrapper' version '0.5.1'
}

repositories {
    ['cloudark', 'localhost'].each { host ->
        maven {
            url "http://$host:8081/artifactory/local"
            credentials {
                username = findProperty('cloudarkUser')
                password = findProperty('cloudarkApiKey')
            }
        }
    }
}

configurations {
    data
}

dependencies {
    data group: 'de.dfki.mary', name: 'blizzard2017-data-wav', version: '0.4.0', ext: 'zip'
}

task unpackData(type: Copy) {
    from configurations.data.files.collect { zipFile ->
        zipTree(zipFile)
    }
    into "$buildDir/wav"
    eachFile {
        it.path = it.name
    }
    includeEmptyDirs = false
}

task copy_textgrid(type: Copy) {
    // to be replaced with ark data
    from "textgrid/"
    into "$buildDir/textgrid"
}

task resample(type: PyExec) {
    dependsOn unpackData
    srcDir = file("$buildDir/wav")
    destDir = file("$buildDir/wav_")
    pyFile = file("scripts/00_resample.py")
    args += [srcDir, destDir]
}

task extract_f0(type: PyExec) {
    dependsOn resample, praat
    srcDir = file("$buildDir/wav_")
    destDir = file("$buildDir/f0")
    pyFile = file("scripts/00a_extract_f0.py")
    def praatFile = file("scripts/00b_praat_script.praat")
    inputs.files praatFile
    args += [srcDir, destDir, praat.binary, praatFile]
}

task extract_output_features(type: PyExec) {
    dependsOn resample
    srcDir = file("$buildDir/wav_")
    destDir = file("$buildDir/output_features")
    destDir2 = file("$buildDir/extraction_times/")
    pyFile = file("scripts/01_extract_output_features.py")
    args += [srcDir, destDir, destDir2]
}

task generate_phone_dict(type: Exec) {
    dependsOn copy_textgrid
    def textGridDir = "$buildDir/textgrid/"
    def phoneDictDir = "$buildDir/phone_dictionary/"
    workingDir 'scripts/'
    commandLine 'python3', '02_phone_dict.py', textGridDir, phoneDictDir
    doFirst {
        file(phoneDictDir).mkdirs()
    }
}

task extract_input_features(type: Exec) {
    dependsOn extract_f0
    dependsOn extract_output_features
    dependsOn generate_phone_dict
    def timesDir = "$buildDir/extraction_times/"
    def textGridDir = "$buildDir/textgrid/"
    def phoneDictDir = "$buildDir/phone_dictionary/"
    def f0Dir = "$buildDir/f0/"
    def inputFeaturesDir = "$buildDir/input_features/"
    workingDir 'scripts/'
    commandLine 'python3', '03_extract_input_features.py', timesDir, textGridDir, phoneDictDir, f0Dir, inputFeaturesDir
    doFirst {
        file(inputFeaturesDir).mkdirs()
    }
}

task calculate_input_mean(type: Exec) {
    dependsOn extract_input_features
    def inputFeaturesDir = "$buildDir/input_features/"
    def meanStdDir = "$buildDir/mean_std/"
    workingDir 'scripts/'
    commandLine 'python3', '04_calculate_input_mean_std.py', inputFeaturesDir, meanStdDir
    doFirst {
        file(meanStdDir).mkdirs()
    }
}

task calculate_output_mean(type: Exec) {
    dependsOn extract_output_features
    def outputFeaturesDir = "$buildDir/output_features/"
    def meanStdDir = "$buildDir/mean_std/"
    workingDir 'scripts/'
    commandLine 'python3', '04_calculate_output_mean_std.py', outputFeaturesDir, meanStdDir
    doFirst {
        file(meanStdDir).mkdirs()
    }
}

task normalize_input_features(type: Exec) {
    dependsOn calculate_input_mean
    def meanStdDir = "$buildDir/mean_std/"
    def intputFeaturesDir = "$buildDir/input_features/"
    def normInputFeaturesDir = "$buildDir/normalized_input_features/"
    workingDir 'scripts/'
    commandLine 'python3', '05_normalize_input_features.py', meanStdDir, intputFeaturesDir, normInputFeaturesDir
    doFirst {
        file(normInputFeaturesDir).mkdirs()
    }
}

task normalize_output_features(type: Exec) {
    dependsOn calculate_output_mean
    def meanStdDir = "$buildDir/mean_std/"
    def outputFeaturesDir = "$buildDir/output_features/"
    def normoutputFeaturesDir = "$buildDir/normalized_output_features/"
    workingDir 'scripts/'
    commandLine 'python3', '06_normalize_output_features.py', meanStdDir, outputFeaturesDir, normoutputFeaturesDir
    doFirst {
        file(normoutputFeaturesDir).mkdirs()
    }
}

task trainNetwork(type: Exec) {
    dependsOn normalize_input_features
    dependsOn normalize_output_features
    def normInputFeaturesDir = "$buildDir/normalized_input_features/"
    def normoutputFeaturesDir = "$buildDir/normalized_output_features/"
    def networkOutputsDir = "$buildDir/FFNN_models/"
    workingDir 'scripts/'
    commandLine 'python3', '07_FFNN.py', normInputFeaturesDir, normoutputFeaturesDir, networkOutputsDir
    doFirst {
        file(networkOutputsDir).mkdirs()
    }
}
