evaluationDependsOn(':data')

dependencies {
    data project(path: ':data', configuration: 'archives')
}

task unpackData(type: Copy) {
    from configurations.data
    into "$buildDir"
    filesMatching '*.zip', { zipFileDetails ->
        copy {
            from zipTree(zipFileDetails.file)
            into destinationDir
        }
        zipFileDetails.exclude()
    }
}

/*
add a task to get the file with the train_test_valid data splits from the f0 gradle project
*/


task trainNetwork(type: PyExec) {
    dependsOn unpackData
    srcFiles = [file("$buildDir/11_split_train_test_valid"), file("$buildDir/09_normalized_input_features"),
                file("$buildDir/10_normalized_output_features")]
    destDirs = [file("$buildDir/12_FFNN_models"), file("$buildDir/13_frozen_models")
    pyFile = file("08_FFNN.py")
    args += srcFiles + destDirs
}

task packageModel(type: Zip) {
    from trainNetwork, {
        include 'frozen_model'
    }
    from unpackData, {
        include '*.json', '*.dict'
    }
}

artifacts {
    archives packageModel
}

publishing {
    publications {
        model(MavenPublication) {
            artifact packageModel, {
                artifactId "blizzard2017-f0-dnn-model"
            }
        }
    }
}
