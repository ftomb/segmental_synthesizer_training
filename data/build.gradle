plugins {
    id 'org.m2ci.msp.praat-wrapper' version '0.5.1'
}

ext {
    blizzardDataVersion = '0.4.0'
}

repositories {
    ['cloudark', 'localhost'].each { host ->
        maven {
            url "http://$host:8081/artifactory/local"
            credentials {
                username = findProperty('cloudarkUser')
                password = findProperty('cloudarkApiKey')
            }
        }
    }
}

dependencies {
    data group: 'de.dfki.mary', name: 'blizzard2017-data-wav', version: blizzardDataVersion, ext: 'zip'
    data group: 'de.dfki.mary', name: 'blizzard2017-data-lab', version: blizzardDataVersion, ext: 'zip'
}

task unpackData(type: Copy) {
    from configurations.data.files.collect { zipFile ->
        zipTree(zipFile)
    }
    into "$buildDir/data"
    exclude '**/HanselAndGretel_010_006.*'
}

task resample(type: PyExec) {
    dependsOn unpackData
    srcFiles = file("$buildDir/data/wav-$blizzardDataVersion/wav")
    destDirs = file("$buildDir/01_resampled_wav")
    pyFile = file("scripts/00_resample.py")
    args += [srcFiles, destDirs]
}

task extract_output_features(type: PyExec) {
    dependsOn resample
    srcFiles = file("$buildDir/01_resampled_wav")
    destDirs = [file("$buildDir/02_output_features"), file("$buildDir/03_extraction_times/"), file("$buildDir/04_f0/")]
    pyFile = file("scripts/01_extract_output_features.py")
    args += [srcFiles] + destDirs
}

task generate_phone_dict(type: PyExec) {
    dependsOn unpackData
    srcFiles = file("$buildDir/data/lab-$blizzardDataVersion/TextGrid")
    destDirs = file("$buildDir/05_phone_dictionary")
    pyFile = file("scripts/02_phone_dict.py")
    args += [srcFiles, destDirs]
}

task extract_input_features(type: PyExec) {
    dependsOn extract_output_features, generate_phone_dict
    srcFiles = [file("$buildDir/03_extraction_times"),
                srcFiles = file("$buildDir/data/lab-$blizzardDataVersion/TextGrid"),
                file("$buildDir/05_phone_dictionary"),
                file("$buildDir/04_f0")]
    destDirs = file("$buildDir/06_input_features")
    pyFile = file("scripts/03_extract_input_features.py")
    args += srcFiles + [destDirs]
}

task calculate_input_mean(type: PyExec) {
    dependsOn extract_input_features
    srcFiles = file("$buildDir/06_input_features")
    destDirs = file("$buildDir/07_input_mean_std")
    pyFile = file("scripts/04_calculate_input_mean_std.py")
    args += [srcFiles, destDirs]
}

task calculate_output_mean(type: PyExec) {
    dependsOn extract_output_features
    srcFiles = file("$buildDir/02_output_features")
    destDirs = file("$buildDir/08_output_mean_std")
    pyFile = file("scripts/05_calculate_output_mean_std.py")
    args += [srcFiles, destDirs]
}

task normalize_input_features(type: PyExec) {
    dependsOn extract_input_features, calculate_input_mean
    srcFiles = [file("$buildDir/07_input_mean_std"),
                file("$buildDir/06_input_features")]
    destDirs = file("$buildDir/09_normalized_input_features")
    pyFile = file("scripts/06_normalize_input_features.py")
    args += srcFiles + [destDirs]
}

task normalize_output_features(type: PyExec) {
    dependsOn extract_output_features, calculate_output_mean
    srcFiles = [file("$buildDir/08_output_mean_std"),
                file("$buildDir/02_output_features")]
    destDirs = file("$buildDir/10_normalized_output_features")
    pyFile = file("scripts/07_normalize_output_features.py")
    args += srcFiles + [destDirs]
}

task packageData(type: Zip) {
    from normalize_input_features, {
        rename { "09_normalized_input_features/$it" }
    }
    from normalize_output_features, {
        rename { "10_normalized_output_features/$it" }
    }
    from calculate_input_mean, calculate_output_mean, generate_phone_dict
}

artifacts {
    archives packageData
}

publishing {
    publications {
        f0(MavenPublication) {
            artifact packageF0, {
                artifactId "blizzard2017-data-f0"
            }
        }
    }
}
